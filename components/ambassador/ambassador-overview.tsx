'use client';

import { useState, useEffect } from 'react';
import { TrendingUp, ChartColumnIncreasing, Share, ScreenShare } from 'lucide-react';
import NumberFlow from '@number-flow/react';

import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { mockAmbassadorEarningsBreakdownData } from '@/lib/mock-data';
import { DataChart } from '@/components/ui/data-chart';
import { motion } from 'framer-motion';
export function AmbassadorOverview() {
  const metrics = [
    {
      title: 'Lifetime Earning',
      value: 2802.00,
      icon: TrendingUp,
      subtitle: 'Total earnings',
      isCurrency: true,
    },
    {
      title: "Today's Earnings",
      value: 45.55,
      icon: ChartColumnIncreasing,
      subtitle: '+12% from yesterday',
      subtitleColor: 'text-green-600',
      isCurrency: true,
    },
    {
      title: 'Direct Referral',
      value: 3,
      icon: Share,
      subtitle: "Level 1 projects you've referred",
      isCurrency: false,
    },
    {
      title: 'Indirect Referral',
      value: 3,
      icon: ScreenShare,
      subtitle: 'Level 2 projects from your network',
      isCurrency: false,
    }
  ];

  const quickStats = [
    { label: 'Weekly Earnings', value: 1234, isCurrency: true },
    { label: 'Monthly Earnings', value: 1234, isCurrency: true },
    { label: 'Average Daily Earning', value: 1234, isCurrency: true },
    { label: 'Most Profitable Referral', value: 'PEPE ($123)', isText: true },
    { label: 'Ambassador Rank', value: 'Silver', isText: true },
  ];

  const [animatedMetrics, setAnimatedMetrics] = useState(metrics.map(m => ({ ...m, value: 0 })));
  const [animatedStats, setAnimatedStats] = useState(quickStats.map(s => ({ ...s, value: s.isText ? s.value : 0 })));

  useEffect(() => {
    // Start with zero
    setAnimatedMetrics(metrics.map(m => ({ ...m, value: 0 })));
    setAnimatedStats(quickStats.map(s => ({ ...s, value: s.isText ? s.value : 0 })));
    
    // Animate to actual values after a short delay
    const timer = setTimeout(() => {
      setAnimatedMetrics(metrics);
      setAnimatedStats(quickStats);
    }, 100);

    return () => clearTimeout(timer);
  }, []); // Only run on mount

  return (
    <motion.div
      className="space-y-4 md:space-y-6"
      initial={{ opacity: 0, y: 10 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
    >
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
        {animatedMetrics.map((metric, index) => (
          <Card key={index}>
            <CardContent className="pt-6">
              <div className="flex items-center justify-between">
                <CardTitle className="text-sm font-medium">{metric.title}</CardTitle>
                <metric.icon className="h-4 w-4 text-muted-foreground" />
              </div>
              <div className="mt-2">
                <div className="text-2xl font-bold">
                  <NumberFlow 
                    value={metric.value}
                    format={metric.isCurrency ? {
                      style: 'currency',
                      currency: 'USD',
                      minimumFractionDigits: 2,
                      maximumFractionDigits: 2
                    } : {
                      minimumFractionDigits: 0,
                      maximumFractionDigits: 0
                    }}
                  />
                </div>
                <p className={`text-xs ${metric.subtitleColor || 'text-muted-foreground'}`}>
                  {metric.subtitle}
                </p>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
   
      <DataChart
        title="Earning over time"
        description="Your daily earning from the ambassador programs"
        data={mockAmbassadorEarningsBreakdownData}
        dataKey="numberOfBots"
        color="hsl(var(--chart-1))"
      />

      <div className="grid gap-4 md:grid-cols-2">
        {/* Commission structure */}
        <Card>
          <CardHeader>
            <CardTitle>Commission structure</CardTitle>
            <p className="text-sm text-muted-foreground">How you earn from referred projects</p>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-4">
              <div className="space-y-2 border rounded-md p-4">
                <h4 className="font-medium">Level 1 : Direct Referrals</h4>
                <p className="text-sm text-muted-foreground">
                  You earn 10% of all fees generated by projects that sign up using your unique link.
                </p>
              </div>
              <div className="space-y-2 border rounded-md p-4">
                <h4 className="font-medium">Level 2 : Indirect Referrals</h4>
                <p className="text-sm text-muted-foreground">
                  You earn 3% of all fees generated by projects that your direct referrals bring to Valmira.
                </p>
              </div>
              <div className="space-y-2 border rounded-md p-4">
                <h4 className="font-medium">Lifetime Payout</h4>
                <p className="text-sm text-muted-foreground">
                  As long as a referred project continues using Valmira, you keep earning daily from their fees.
                </p>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Quick Stats */}
        <Card>
          <CardHeader>
            <CardTitle>Quick Stats</CardTitle>
            <p className="text-sm text-muted-foreground">Your ambassador performance at a glance</p>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {animatedStats.map((stat, index) => (
                <div key={index} className="flex justify-between py-2">
                  <span className="text-foreground">{stat.label}</span>
                  <span className="font-medium">
                    {stat.isText ? (
                      stat.value
                    ) : (
                      <NumberFlow 
                        value={Number(stat.value)}
                        format={stat.isCurrency ? {
                          style: 'currency',
                          currency: 'USD',
                          minimumFractionDigits: 2,
                          maximumFractionDigits: 2
                        } : {
                          minimumFractionDigits: 0,
                          maximumFractionDigits: 0
                        }}
                      />
                    )}
                  </span>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      </div>
    </motion.div>
  );
} 